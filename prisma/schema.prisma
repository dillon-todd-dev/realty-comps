generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ComparableType {
  SALE
  RENT
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  email         String  @unique @map("email_address")
  name          String
  emailVerified Boolean
  image         String? @map("image_url")

  properties Property[]

  sessions Session[]
  accounts Account[]

  role       String?
  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  @@map("users")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Address {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  street     String   @unique
  city       String
  state      String
  postalCode String   @map("postal_code")
  county     String?
  latitude   Decimal?
  longitude  Decimal?

  properties  Property[]
  comparables Comparable[]

  @@map("addresses")
}

model Property {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  imageUrl   String? @map("image_url")
  rentCastId String  @unique @map("rent_cast_id")
  mlsNumber  Int?
  mlsName    String?

  monthlyHoa       Decimal? @map("annual_hoa")
  bedrooms         Int
  bathrooms        Decimal
  garageSpaces     Int?
  squareFootage    Decimal  @map("square_footage")
  yearBuilt        Int      @map("year_built")
  lotSize          Decimal  @map("lot_size")
  subdivision      String
  legalDescription String   @map("legal_description")

  price          Decimal?
  priceRangeLow  Decimal? @map("price_range_low")
  priceRangeHigh Decimal? @map("price_range_high")
  rent           Decimal?
  rentRangeLow   Decimal? @map("rent_range_low")
  rentRangeHigh  Decimal? @map("rent_range_high")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  addressId String  @map("address_id")
  address   Address @relation(fields: [addressId], references: [id], onDelete: Cascade)

  evaluations    Evaluation[]
  taxAssessments TaxAssessment[]
  propertyTaxes  PropertyTax[]

  @@map("properties")
}

model Evaluation {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  estimatedSalePrice Decimal @default(0) @map("estimated_sale_price")
  sellerContribution Decimal @default(0) @map("seller_contribution")
  repairs            Decimal @default(0)
  insurance          Decimal @default(0)
  rent               Decimal @default(0)
  hardAppraisedPrice Decimal @default(0) @map("hard_appraised_price")
  survey             Decimal @default(400)
  hoa                Decimal @default(0)
  inspection         Decimal @default(400)
  maxRefiCashback    Decimal @default(2000) @map("max_refi_cashback")
  purchasePrice      Decimal @default(0) @map("purchase_price")
  appraisal          Decimal @default(400)
  propertyTax        Decimal @default(0) @map("property_tax")
  miscellaneous      Decimal @default(0)

  downPayment       Decimal @default(20) @map("down_payment")
  loanTerm          Int     @default(30) @map("loan_term")
  interestRate      Decimal @default(5) @map("interest_rate")
  lenderFees        Decimal @default(6000) @map("lender_fees")
  mortgageInsurance Decimal @default(0) @map("mortgage_insurance")
  monthsOfTaxes     Int     @default(0) @map("months_of_taxes")

  hardLoanToValue      Decimal @default(70) @map("hard_loan_to_value")
  hardLenderFees       Decimal @default(10000) @map("hard_lender_fees")
  hardInterestRate     Decimal @default(14) @map("hard_interest_rate")
  hardMonthsToRefi     Int     @default(3) @map("hard_months_to_refi")
  hardRollInLenderFees Boolean @default(true) @map("hard_roll_in_lender_fees")
  hardWeeksUntilLeased Int     @default(8) @map("hard_weeks_until_leased")

  refiLoanToValue       Decimal @default(75) @map("refi_loan_to_value")
  refiLoanTerm          Int     @default(30) @map("refi_loan_term")
  refiInterestRate      Decimal @default(5) @map("refi_interest_rate")
  refiLenderFees        Decimal @default(5000) @map("refi_lender_fees")
  refiMonthsOfTaxes     Int     @default(2) @map("refi_months_of_taxes")
  refiMortgageInsurance Decimal @default(0) @map("refi_mortgage_insurance")

  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  comparables EvaluationComparable[]

  @@map("evaluations")
}

model Comparable {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  rentCastId String @unique @map("rent_cast_id")

  subdivision   String?
  bedrooms      Int
  bathrooms     Int
  garage        Int?
  yearBuilt     Int     @map("year_built")
  squareFootage Int     @map("square_footage")
  lotSize       Int     @map("lot_size")
  included      Boolean @default(true)
  price         Decimal

  listingType  String  @map("listing_type")
  listedDate   String  @map("listed_date")
  removedDate  String? @map("removed_date")
  lastSeenDate String  @map("last_seen_date")
  daysOnMarket Int     @map("days_on_market")
  daysOld      Int     @map("days_old")
  distance     Decimal
  correlation  Decimal

  addressId String  @map("address_id")
  address   Address @relation(fields: [addressId], references: [id], onDelete: Cascade)

  evaluations EvaluationComparable[]

  @@map("comparables")
}

model EvaluationComparable {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  type ComparableType

  evaluationId String
  comparableId String

  evaluation Evaluation @relation(fields: [evaluationId], references: [id], onDelete: Cascade)
  comparable Comparable @relation(fields: [comparableId], references: [id], onDelete: Cascade)

  @@map("evaluation_comparable")
}

model TaxAssessment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt

  year         Int?
  value        Decimal?
  land         Decimal?
  improvements Decimal?

  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@map("tax_assessments")
}

model PropertyTax {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  year  Int?
  total Decimal?

  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@map("property_taxes")
}
